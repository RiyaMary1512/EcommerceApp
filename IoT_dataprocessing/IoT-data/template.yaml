AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  IoT-data

  Sample SAM Template for IoT-data

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
Resources:
  TruckData:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: 'TruckData'
      AttributeDefinitions:
        - AttributeName: 'truck_id'
          AttributeType: 'S'
        - AttributeName: 'timestamp'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'truck_id'
          KeyType: 'HASH'
        - AttributeName: 'timestamp'
          KeyType: 'RANGE'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  TruckDataFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: truck_data/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Events:
        TruckData:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /truck
            Method: get
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
  TruckDataApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'TruckDataApi'
  TruckDataApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt TruckDataApi.RootResourceId
      PathPart: 'trucks'
      RestApiId: !Ref TruckDataApi
  TruckDataApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId: !Ref TruckDataApiResource
      RestApiId: !Ref TruckDataApi
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - Region: !Ref 'AWS::Region'
            LambdaArn: !GetAtt TruckDataFunction.Arn
  TruckDataLambdaApiPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt TruckDataFunction.Arn
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub
        - arn:aws:execute-api:${Region}:${AccountId}:${ApiId}/*
        - Region: !Ref 'AWS::Region'
          AccountId: !Ref 'AWS::AccountId'
          ApiId: !Ref TruckDataApi
  TruckDataLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt TruckData.Arn
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  TruckDataApi:
    Description: API Gateway endpoint URL for Prod stage for Truck Data function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/truck/"
  TruckDataFunction:
    Description: Truck Data Lambda Function ARN
    Value: !GetAtt TruckDataFunction.Arn
  TruckDataFunctionIamRole:
    Description: Implicit IAM Role created for Truck Data function
    Value: !GetAtt TruckDataFunctionRole.Arn
